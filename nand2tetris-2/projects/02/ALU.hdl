// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:

// if (zx == 1) set x = 0        // 16-bit constant
// if (zy == 1) set y = 0        // 16-bit constant

// if (nx == 1) set x = !x       // bitwise not
// if (ny == 1) set y = !y       // bitwise not


// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and

// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    /* get zeros */
    Not16(in=x, out=NotX);
    And16(a=x, b=NotX, out=zeros);
    Not16(in=zeros, out=ones);


    /* // if (zx == 1) set x = 0        // 16-bit constant */
    /* // if (zy == 1) set y = 0        // 16-bit constant */
    Mux16(a=x,b=zeros,sel=zx, out=x0);
    Mux16(a=y,b=zeros,sel=zy, out=y0);

    /* // if (nx == 1) set x = !x       // bitwise not */
    /* // if (ny == 1) set y = !y       // bitwise not */
    Not16(in=x0, out=negateX);
    Not16(in=y0, out=negateY);
    Mux16(a=x0,b=negateX,sel=nx, out=x1);
    Mux16(a=y0,b=negateY,sel=ny, out=y1);

    /* // if (f == 1)  set out = x + y  // integer 2's complement addition */
    /* // if (f == 0)  set out = x & y  // bitwise and */
    And16(a=x1,b=y1, out=xAndy);

    Add16(a=x1,b=y1, out=xAddy);

    Mux16(a=xAndy, b=xAddy, sel=f, out=out1);


    /* // if (no == 1) set out = !out   // bitwise not */
    Not16(in=out1, out=negateOut1);
    Mux16(a=out1,b=negateOut1,sel=no, out[0..7]=part1, out[8..15]=part2, out=out2);
    And16(a=out2,b=ones, out[15]=ng, out=out);

    /* // if (out == 0) set zr = 1 */

    Or8Way(in=part1, out=orOut1);
    Or8Way(in=part2, out=orOut2);
    Or(a=orOut1, b=orOut2, out=orzr);
    Not(in=orzr, out=zr);
    /* // if (out < 0) set ng = 1 */


}
