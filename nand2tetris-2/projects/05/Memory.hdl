// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    /* use ram depends on the left most bit */
    /* use kbd depends on the left most and second left most bit */
    Not(in=address[14], out=useRAM);
    And(a=address[14], b=address[13], out=useKBD);

    /* use screen only if not use kbd and not use RAM */
    Not(in=useKBD, out=notUseKBD);
    Not(in=useRAM, out=notUseRAM);
    And(a=notUseRAM, b=notUseRAM, out=useScreen);

    /* use ram only if the load is asserted */
    And(a=load, b=useRAM, out=useRAM4Real);
    RAM16K(in=in, load=useRAM4Real, address=address[0..13], out=RAMOut);

    /* use screen only if the load is asserted */
    And(a=load, b=useScreen, out=useScreen4Real);
    Screen(in=in, load=useScreen4Real, address=address[0..12], out=SCreenOut);
    Keyboard(out=KBDOut);

    /* choose screen or kbd base on usekbd */
    Mux16(a=SCreenOut, b=KBDOut, sel=useKBD, out=SKOUT);

    /* choose RAM or (screen or kbd) base on left most bit */
    Mux16(a=RAMOut, b=SKOUT, sel=address[14], out=out);

}
